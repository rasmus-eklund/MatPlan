generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id               String             @id
  recipe           recipe[]
  menu             menu[]
  shoppingListItem shoppingListItem[]
  store            store[]
  home             home[]

  @@map("public.user")
}

model home {
  user       user       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  ingredient ingredient @relation(fields: [name], references: [name])
  name       String     @id
  quantity   Decimal?
  unit       String?

  @@map("public.home")
}

model recipe {
  id          String              @id @default(uuid())
  name        String
  portions    Int
  instruction String
  user        user                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  ingredients recipe_ingredient[]
  menu        menu[]
  containers  recipe_recipe[]     @relation("containedRecipes")
  containedIn recipe_recipe[]     @relation("containerRecipes")

  @@map("public.recipe")
}

model recipe_recipe {
  id                String @id @default(uuid())
  portions          Int
  containerRecipe   recipe @relation("containedRecipes", fields: [containerRecipeId], references: [id], onDelete: Cascade)
  containerRecipeId String
  containedRecipe   recipe @relation("containerRecipes", fields: [containedRecipeId], references: [id], onDelete: Cascade)
  containedRecipeId String

  @@map("public.recipe_recipe")
}

model category {
  id             Int              @id
  name           String
  ingredient     ingredient[]
  subcategory    subcategory[]
  store_category store_category[]

  @@map("public.category")
}

model subcategory {
  id             Int              @id
  name           String
  categoryId     Int
  ingredient     ingredient[]
  category       category         @relation(fields: [categoryId], references: [id])
  store_category store_category[]

  @@map("public.subcategory")
}

model ingredient {
  name              String              @id
  categoryId        Int
  subcategoryId     Int
  shoppingListItem  shoppingListItem[]
  category          category            @relation(fields: [categoryId], references: [id])
  subcategory       subcategory         @relation(fields: [subcategoryId], references: [id])
  recipe_ingredient recipe_ingredient[]
  home              home[]

  @@map("public.ingredient")
}

model recipe_ingredient {
  id         String     @id @default(uuid())
  recipeId   String
  quantity   Decimal
  unit       String
  name       String
  ingredient ingredient @relation(fields: [name], references: [name])
  recipe     recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("public.recipe_ingredient")
}

model menu {
  id               String             @id @default(uuid())
  recipeId         String
  userId           String
  portions         Int
  day              String
  recipe           recipe             @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user             user               @relation(fields: [userId], references: [id], onDelete: Cascade)
  shoppingListItem shoppingListItem[]

  @@map("public.menu")
}

model shoppingListItem {
  id         String     @id @default(uuid())
  name       String
  userId     String
  unit       String
  quantity   Decimal
  checked    Boolean
  recipe     menu?      @relation(fields: [menuId], references: [id], onDelete: Cascade)
  ingredient ingredient @relation(fields: [name], references: [name])
  user       user       @relation(fields: [userId], references: [id], onDelete: Cascade)
  menuId     String?

  @@map("public.extra_ingredient")
}

model store {
  id     String           @id @default(uuid())
  name   String
  user   user             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  order  store_category[]

  @@map("public.store")
}

model store_category {
  id            String      @id @default(uuid())
  category      category    @relation(fields: [categoryId], references: [id])
  subcategory   subcategory @relation(fields: [subcategoryId], references: [id])
  categoryId    Int
  subcategoryId Int
  store         store?      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String?
}
